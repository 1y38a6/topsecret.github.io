var emailSend = true;
var access = "0";

var prepromise = [
    "–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç –º–Ω–µ —á—Ç–æ...",
    "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å...",
    "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è —à–µ–ø—á–µ—Ç...",
    "–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –º–Ω–µ —è–≤–∏–ª—Å—è –∫–æ—Ç —Å –ø–æ–ª—É–º–µ—Å—è—Ü–æ–º –Ω–∞ –ª–±—É –∏ —Å–∫–∞–∑–∞–ª, —á—Ç–æ...",
    "–ê —Ç—ã –∑–Ω–∞–ª–∞, —á—Ç–æ...",
    "–ú–æ–≥—É —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∑–∞—è–≤–∏—Ç—å...",
    "–ò–∑ –ø–æ—Ç–æ–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç...",
    "–í –º–æ–µ–º —Å–Ω–µ —Ö–æ–º—è–∫ –≤—ã–ª–æ–∂–∏–ª —Å–µ–º–µ—á–∫–∞–º–∏...",
    "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞ –ø—Ä–æ—Å–∏–ª–∞ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –µ—ë –±–æ—è—Ç—å—Å—è, –∞ –µ—â—ë...",
    "–°–µ–≥–æ–¥–Ω—è —Ç—É—á–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –≤ —Ç–µ–∫—Å—Ç...",
    "–ü—Ä–∏—à—ë–ª —Ö–æ–º—è–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –º–µ–Ω—è, –æ–Ω —Å–∫–∞–∑–∞–ª —á—Ç–æ –∏–∑ –±—É–¥—É—â–µ–≥–æ –∏ –ø—Ä–æ—Å–∏–ª–∞ –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ...",
    "–ê —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤–æ–æ–±—â–µ?",
    "–ó–¥–µ—Å—å –µ—â—ë –º–Ω–æ–≥–æ –ø–∞—Å—Ö–∞–ª–æ–∫ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –Ω–æ —Å–µ–π—á–∞—Å —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å, —á—Ç–æ..."
    ];

var today = new Date();
var day = today.getDate();
var month = today.getMonth()+1;
var year = today.getFullYear();
var todayDate = (day < 10 ? "0" : "") + day + "/" + (month < 10 ? "0" : "") + month + "/" + year;

var predictions = {};

function LoadDates()
{
  AddPrediction(
    "12/02/2001",
    "—è–≤–∏–ª–∞—Å—å —Å–∞–º–æ—Å—Ç—å"
    );

  AddPrediction(
    "17/05/2002",
    "–ø—Ä–æ–∏–∑–æ—à–ª–æ —á—É–¥–æ.. –≤ –≤–∏–¥–µ —Ç–µ–±—è"
    );

  AddPrediction(
    "01/03/2021",
    "—Å–µ–≥–æ–¥–Ω—è —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏—à—å —Å–≤–æ—é —Å—É–¥—å–±—É"
    );

  AddPrediction(
    "04/03/2021",
    "—Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –ø–æ–≤–∏—Ç—Å—è –º—É–∂ –≤ –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö"
    );

  AddPrediction(
    "09/03/2021",
    '"–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –º—ã –ø—Ä–æ—Å—Ç–æ –æ–±—è–∑–∞–Ω—ã –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è"'
    );

  AddPrediction(
    "16/03/2021",
    "—Å–ª—É—á–∏—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ü–µ–ª—É–π, –Ω–µ –ø–æ–¥–∞–≤–∏—Å—å‚ô°"
  );

  AddPrediction(
    "21/03/2021",
    "—Å–∫—Ä–æ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Ç–æ–ø–∏—Ç –º–æ—ë —Å–µ—Ä–¥—Ü–µ"
  );

  AddPrediction(
    "19/04/2021",
    "–∫–∞–∂–µ—Ç—Å—è, —è –ª—é–±–ª—é —Ç–µ–±—è"
  );

  AddPredictions(
    "24/04/2021",
    [
      "00:20. –ª—é–±–ª—é —Ç–µ–±—è",
      "—Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å –ø–æ–¥ –∑–Ω–∞–∫–æ–º —Å–∞–º–æ–µ –º–∏–ª–æ–µ —Å–æ–ª–Ω—ã—à–∫–æ –≤ –º–∏—Ä–µ<br>‚ô°",
      "—Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–±—ã—Ç—å —Å —Ç–æ–±–æ–π –≤–¥–≤–æ–µ–º<br>üíï",
      "–æ—Ç –∫—Ä–∞—Å–æ—Ç—ã –∫–æ—Å–º–æ—Å–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ... –Ω–æ –µ–º—É –Ω–µ —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–≤–æ–∏–º–∏ –≥–ª–∞–∑–∞–º–∏<br>‚ô°",
      "—Ç—ã —Å–¥–µ–ª–∞–ª–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º<br>ü•∞",
      "–µ—Å–ª–∏ —Ç—ã —Å–µ–π—á–∞—Å –Ω–µ —É–ª—ã–±–Ω–µ—à—å—Å—è, —Ç–æ —É —Ç–µ–±—è –Ω–µ —Ç—Ä–µ—Å–Ω–µ—Ç –≥—É–±–∞...",
      "–º–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ —Ç–µ–±—è –æ–±–Ω—è—Ç—å",
      "—è –≤–æ—Å—Ö–∏—â–∞—é—Å—å —Ç–æ–±–æ–π"
    ]
  );

  AddPredictions(
    "25/04/2021",
    [
      "–ù–∞—Ä—É—Ç–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è, —Å–ø—Ä–∞–≤–∏—à—å—Å—è –∏ —Ç—ã",
      "–æ—Ç —Ç–≤–æ–µ–≥–æ —à—ë–ø–æ—Ç–∞ —É –º–µ–Ω—è –º—É—Ä–∞—à–∫–∏ –ø–æ –∫–æ–∂–µ",
      "–º—ã—Å–ª–∏ –æ —Ç–µ–±–µ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –º–æ–µ —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ",
      "–≤ –º–∏—Ä–µ –Ω–µ—Ç –∑–≤—É–∫–∞ –ø—Ä–∏—è—Ç–Ω–µ–µ, —á–µ–º —Ç–≤–æ–π —Å–º–µ—Ö",
      "–≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ"
    ]
  );

  AddPredictions(
    "26/04/2021",
    [
      "–º—ã –ø—Ä–æ—Å–∏–¥–µ–ª–∏ –≤ –≤–æ–π—Å–µ –¥–∏—Å–∫–æ—Ä–¥–∞ ~6862 –º–∏–Ω—É—Ç, 114 —á–∞—Å–æ–≤, 4 —Ü–µ–ª—ã—Ö –∏ 75 —Å–æ—Ç—ã—Ö —Å—É—Ç–æ–∫",
      "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ —Ç–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞—Ç–æ –∏—Ö –±—ã–ª–æ: 181",
      "–∫—Ç–æ –≥—Ä—É—Å—Ç–∏—Ç, —Ç–æ—Ç —Ç—Ä–∞–Ω—Å–≤–µ—Å—Ç–∏—Ç",
      "„ÅÇ„Å™„ÅüÂ§™ÈôΩ<br>‚òÄÔ∏è",
      "—Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–µ—á–µ—Ä",
      "—Ä–∞–∑–¥–µ–≤–∞–π—Å—è, –ª–æ–∂–∏—Å—å.."
    ]
  );

  AddPrediction(
    "27/04/2021",
    "—Å–µ–≥–æ–¥–Ω—è –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –ø–ª–∞–∫–∞—Ç—å –æ—Ç —Å—á–∞—Å—Ç—å—è"
  );

  AddPredictions(
    "28/04/2021",
    [
      "—Ç—ã –≤–µ–¥—å –Ω–µ –¥—É–º–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –≤–∑—è–ª –∏ –ø–æ—à—ë–ª —Å–ø–∞—Ç—å? <br><br> —è –¥—É–º–∞–ª –æ —Ç–µ–±–µ. –¥—É–º–∞–ª –æ —Ç–æ–º, –∫–∞–∫ —Å–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –≤–µ–¥—å –Ω–µ –º–æ–≥—É —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ, –∫–æ–≥–¥–∞ –∑–Ω–∞—é, —á—Ç–æ —Ç—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–∞",
      "—Å–ø–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π –ø–æ –ø–æ–≤–æ–¥—É —Ç–æ–≥–æ, —á—Ç–æ –ø–æ—Ä–∞ —Å–ø–∞—Ç—å –±—ã—Ç—å –±—ã –≥–ª—É–ø–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –æ–±–∏–∂–∞–π—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–ª—Å—è –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º",
      "–ü—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –º–æ–µ —Å–æ–ª–Ω—Ü–µ <br><br> –º–æ—ë –Ω–µ –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ —Ç–µ–±—è –≤ –º–æ—è –∂–∏–∑–Ω—å —Ç–µ–º–Ω–∞—è –∏ —É–Ω—ã–ª–∞—è",
      "—è –∏—Å–∫—Ä–µ–Ω–Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –¥–∞—Ä–∏—à—å –º–Ω–µ —É–ª—ã–±–∫—É —É–∂–µ –≤–æ—Ç –ø–æ—á—Ç–∏ –¥–≤–∞ –º–µ—Å—è—Ü–∞, —á—Ç–æ –º–µ–Ω—è –ø—É—Å—Ç–∏–ª–∞ –≤ —Å–≤–æ–π —Ö—Ä—É–ø–∫–∏–π –º–∏—Ä–æ–∫<br>—á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—à—å –º–æ–µ —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ, –∑–∞ —Ç–æ, —á—Ç–æ –º–æ–≥—É —Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π —Å–º–µ—Ö, –∑–∞ —Ç–≤–æ—é –∑–∞–±–æ—Ç—É, —á—Ç–æ –¥–∞—Ä–∏—à—å –º–Ω–µ –≤—Å—ë —Ç–æ, —á–µ–≥–æ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ, –∑–∞ —Ç–æ, —á—Ç–æ –¥–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—â—É—Ç–∏—Ç—å —Å—á–∞—Å—Ç—å–µ",
      "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω, —á—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ —Å–æ–ª–Ω—ã—à–∫–æ, –∑–∞ —Ç–≤–æ–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è, –∑–∞ —Ç–æ, —á—Ç–æ –º–æ–≥—É –≤–æ—Å—Ö–∏—â–∞—Ç—å—Å—è —Ç–æ–±–æ–π, —Ç–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏, —Ä–∞–∑–¥–µ–ª–∏—Å—å –≤—Å—é —Ä–∞–¥–æ—Å—Ç—å –∏ –≥—Ä—É—Å—Ç—å, –∑–∞ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –±–æ–ª—å –≤ –º–æ–µ–π –≥—Ä—É–¥–∏",
      'Â§ßÂ•Ω„Åç<div class="lds-heart"><div></div></div></div>'
    ]
  );

  AddPredictions(
    "29/04/2021",
    [
      "—Ç—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å, –∞ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–ª–Ω—ã—à–∫–æ :–∑",
      "—Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ"
    ]
  );

  AddPredictions(
    "01/05/2021",
    [
      "—Ç–µ–±—è –∂–¥–µ—Ç —Å–∫–∞–∑–∫–∞ –Ω–∞ –Ω–æ—á—å...",
      "—è –≥–æ—Ä–∂—É—Å—å —Ç–µ–º, —á—Ç–æ —è–≤–ª—è—é—Å—å –º—É–∂–µ–º —Ç–∞–∫–æ–π —Å–∏–ª—å–Ω–æ–π –∂–µ–Ω—â–∏–Ω—ã.."
    ]
  );

  AddPredictions(
    "02/05/2021",
    [
      "—Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ<br>‚ô•"
    ]
  );

  AddPredictions(
    "03/05/2021",
    [
      "—ç—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ—á—å –≤–º–µ—Å—Ç–µ, –Ω–æ, –∫–∞–∂–µ—Ç—Å—è, –æ–Ω–∞ –±—ã–ª–∞ –æ—Å–æ–±–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è.<br>–ò–∑–≤–∏–Ω–∏, —á—Ç–æ –æ—Å–æ–∑–Ω–∞–ª —ç—Ç–æ —Ç–∞–∫ –ø–æ–∑–¥–Ω–æ, —è –∏—Å–∫—É–ø–ª—é —Å–≤–æ—é –≤–∏–Ω—É"
    ]
  );

  AddPredictions(
    "07/05/2021",
    [
      '—á—Ç–æ —Å —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ–ª—å–∑—è<br>–ø–æ–≤–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º—è –≤—Å–ø—è—Ç—å..?<br>—á—Ç–æ —Å —Ç–æ–≥–æ, —á—Ç–æ –≤ –≥–ª–∞–∑–∞—Ö<br>–Ω–µ —É–±–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç—Ä–∞—Ö?<br>—ç—Ç–æ—Ç —Å—Ç—Ä–∞—Ö - –ø—É—Å—Ç–æ—Ç—ã<br>–∑–Ω–∞—é —è, –∑–Ω–∞–µ—à—å —Ç—ã. <br>–≤—Å—ë, —á–µ–º –∂–∏–ª —è –≤—á–µ—Ä–∞<br>–Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∏–∫–æ–≥–¥–∞...',
      '—Å–º–æ–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–º –º–æ—â–Ω—ã–º<br>–∑–∞–º–æ–∫ –∏–∑ –ø–µ—Å–∫–∞ –Ω–µ–ø—Ä–æ—á–Ω—ã–π,<br>–ø—Ä–æ—à–∏–±—ë—Ç –≤ —Ö–æ–ª–æ–¥–Ω—ã—Ö –≤–æ–¥–∞—Ö<br>–æ–∑–∞—Ä–µ–Ω–∏–µ –∫–æ–≥–æ-—Ç–æ...<br>–Ω–µ—Ç –Ω–∏ —Å–∏–ª, –Ω–∏ —Å–ª—ë–∑, –Ω–∏ –≤–µ—Ä—ã,<br>–Ω–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã, —É –ø—Ä–µ–¥–µ–ª–∞<br>–ø–æ—á–µ–º—É-–∂–µ –≤—Å—ë —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ<br>–≤ —ç—Ç–æ–º –º–∏—Ä–µ –±–µ–∑–Ω–∞–¥—ë–∂–Ω–æ–º..?'
    ]
  );

  AddPredictions(
    "20/05/2021",
    [
      "—É–ª—ã–±–∞–π—Å—è –ø–æ—á–∞—â–µ, –≤–µ–¥—å —Ç–≤–æ—è —É–ª—ã–±–∫–∞ —Ä–∞–¥—É–µ—Ç –º–Ω–µ –¥—É—à—É‚ô•"
    ]
  );
}

function AddPredictions(date, value)
{
  if(predictions[date] == undefined)
  {
    predictions[date] = value;
  }
  else
  {
    for(var i = 0; i<value.length; i++)
    {
      predictions[date].push(value[i]);
    }
  }
}

function AddPrediction(date, value)
{
  if(predictions[date] == undefined)
  {
    var valueArr = [];
    valueArr.push(value);
    predictions[date] = valueArr;
  }
  else
  {
    predictions[date].push(value);
  }
}

function getRandomInt(max)
{
    return Math.floor(Math.random() * max);
}

function CheckAccessDate()
{
  var accessDate = $("#date").val();
  if(accessDate == "2021-03-01")
  {
    localStorage.setItem("access", "1");
    $(".access_screen").addClass("transparent");
  }
}

function CheckAccess()
{
  if(localStorage.getItem("access") != "1")
  {
     $(".access_screen").removeClass("transparent");
  }
}

function compareDate(date)
{
    if(date == undefined) return false;
    return date == todayDate;
}

async function GetGeoData()
{
  var parsedData = [];
    $.getJSON('https://api.db-ip.com/v2/free/self', function(data) {

        parsedData = data;
    });
    await sleep(1000);
  return parsedData;
}

function SetRandomPreprediction()
{
  var pre = prepromise[getRandomInt(prepromise.length)];
  var loop = 0;
  while(pre == lastPreprediction)
  {
    pre = prepromise[getRandomInt(prepromise.length)];
    if(loop > 15)
    {
      break;
    }
  }
  localStorage.setItem("lastPreprediction", pre);
  $(".prepromise").html(pre);
}

var lastPreprediction = localStorage.getItem("lastPreprediction");

function SetRandomColor()
{
  var color = $("body").css("background-color");
  var hsvColor = rgb2hsv(color);
  hsvColor.h = 230 + getRandomInt(70);
  var newColor = hsvToRgb(hsvColor.h, hsvColor.s, hsvColor.v);
  $("body").css("background-color", newColor);
}

function GetLast()
{
  last = parseInt(localStorage.getItem("last", "0"));
  if(isNaN(last))
  {
    return 0;
  }

  var lastDate = localStorage.getItem("lastdate");
  if(lastDate != undefined)
  {
    if(!compareDate(lastDate))
    {
      return 0;
    }
  }
  return last;
}

async function onClick()
{
    LoadDates();
    $(".black-screen").addClass("fade");
    SetRandomPreprediction();

    var parsedData = await GetGeoData();

    var n = "Unknown";

    SetRandomColor();

    if(emailSend)
    {
      await sleep(2000);
    }
    $(".loading").addClass("fade");

    var last = GetLast();
    
    var currentPrediction = "";
    $(".date").html(todayDate);
    
    if(predictions[todayDate] != undefined)
    {
      if(last < predictions[todayDate].length)
      {
        currentPrediction = predictions[todayDate][last];
        localStorage.setItem("lastPrediction", currentPrediction);
        last++;
      }
    }

    if(currentPrediction.length == 0)
    {
      currentPrediction = ReturnRandom();
    }

    var templateParams = 
    {
        name: n,
        ip: parsedData["ipAddress"],
        city: parsedData["city"],
        date: today.toDateString(),
        time: today.toTimeString(),
        promise: last,
        promiseText: currentPrediction
    }
    
    SendEmail(templateParams);

    localStorage.setItem("lastdate", todayDate);
    // localStorage.setItem("lastdate", "00/00/0000");
    localStorage.setItem("last", last.toString());
    $(".prediction").html(currentPrediction);
    $(".sun").removeClass("transparent");
}

function SendEmail(params)
{
  if(emailSend)
  {
    emailjs.send('service_6ctyxdz', 'template_oz4ahpn', params)
        .then(function(response) {
           console.log('SUCCESS!', response.status, response.text);
        }, function(error) {
           console.log('FAILED...', error);
        });
  }
}

var lastPrediction = localStorage.getItem("lastPrediction");

function ReturnRandom()
{
  var string = "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞<br>üíï";
  string += "<br><br> —á—Ç–æ–±—ã —Ç–µ–±–µ –Ω–µ –±—ã–ª–æ –≥—Ä—É—Å—Ç–Ω–æ, –≤–æ—Ç —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ:<br><br>";
  var key = RandomKey();
  var value = RandomKeyValue(key);
  var loop = 0;
  while(value == lastPrediction)
  {
    key = RandomKey();
    value = RandomKeyValue(key);
    if(loop > 15)
    {
      break;
    }
  }
  localStorage.setItem("lastPrediction", value);
  string += "[ " + key + " ]<br>" + value;
  return string;
}

function RandomKey()
{
  return Object.keys(predictions)[Math.floor(Math.random()*Object.keys(predictions).length)];
};

function RandomKeyValue(key)
{
  var random = Math.floor(Math.random()*predictions[key].length);
  return predictions[key][random];
};

function sleep(ms)
{
    return new Promise(resolve => setTimeout(resolve, ms));
}

function hsvToRgb(h, s, v) {
    var r, g, b;
    var i;
    var f, p, q, t;
     
    // Make sure our arguments stay in-range
    h = Math.max(0, Math.min(360, h));
    s = Math.max(0, Math.min(100, s));
    v = Math.max(0, Math.min(100, v));
     
    // We accept saturation and value arguments from 0 to 100 because that's
    // how Photoshop represents those values. Internally, however, the
    // saturation and value are calculated from a range of 0 to 1. We make
    // That conversion here.
    s /= 100;
    v /= 100;
     
    if(s == 0) {
        // Achromatic (grey)
        r = g = b = v;
        return [
            Math.round(r * 255), 
            Math.round(g * 255), 
            Math.round(b * 255)
        ];
    }
     
    h /= 60; // sector 0 to 5
    i = Math.floor(h);
    f = h - i; // factorial part of h
    p = v * (1 - s);
    q = v * (1 - s * f);
    t = v * (1 - s * (1 - f));
     
    switch(i) {
        case 0:
            r = v;
            g = t;
            b = p;
            break;
     
        case 1:
            r = q;
            g = v;
            b = p;
            break;
     
        case 2:
            r = p;
            g = v;
            b = t;
            break;
     
        case 3:
            r = p;
            g = q;
            b = v;
            break;
     
        case 4:
            r = t;
            g = p;
            b = v;
            break;
     
        default: // case 5:
            r = v;
            g = p;
            b = q;
    }
     
    /*
    return [
        Math.round(r * 255), 
        Math.round(g * 255), 
        Math.round(b * 255)
    ];
    */
    return rgb(Math.round(r * 255), 
    Math.round(g * 255), 
    Math.round(b * 255));
}

function rgb(r, g, b){
    r = Math.floor(r);
    g = Math.floor(g);
    b = Math.floor(b);
    return ["rgb(",r,",",g,",",b,")"].join("");
}
  

function rgb2hsv (rgb) {
    rgbMatch = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    var r=parseInt(rgbMatch[1]);
    var g=parseInt(rgbMatch[2]);
    var b=parseInt(rgbMatch[3]);
    let rabs, gabs, babs, rr, gg, bb, h, s, v, diff, diffc, percentRoundFn;
    rabs = r / 255;
    gabs = g / 255;
    babs = b / 255;
    v = Math.max(rabs, gabs, babs),
    diff = v - Math.min(rabs, gabs, babs);
    diffc = c => (v - c) / 6 / diff + 1 / 2;
    percentRoundFn = num => Math.round(num * 100) / 100;
    if (diff == 0) {
        h = s = 0;
    } else {
        s = diff / v;
        rr = diffc(rabs);
        gg = diffc(gabs);
        bb = diffc(babs);

        if (rabs === v) {
            h = bb - gg;
        } else if (gabs === v) {
            h = (1 / 3) + rr - bb;
        } else if (babs === v) {
            h = (2 / 3) + gg - rr;
        }
        if (h < 0) {
            h += 1;
        }else if (h > 1) {
            h -= 1;
        }
    }
    return {
        h: Math.round(h * 360),
        s: percentRoundFn(s * 100),
        v: percentRoundFn(v * 100)
    };
}

particlesJS("particles-js", {
    "particles": {
      "number": {
        "value": 355,
        "density": {
          "enable": true,
          "value_area": 789.1476416322727
        }
      },
      "color": {
        "value": "#ffffff"
      },
      "shape": {
        "type": "circle",
        "stroke": {
          "width": 0,
          "color": "#000000"
        },
        "polygon": {
          "nb_sides": 5
        },
        "image": {
          "src": "img/github.svg",
          "width": 100,
          "height": 100
        }
      },
      "opacity": {
        "value": 0.48927153781200905,
        "random": false,
        "anim": {
          "enable": true,
          "speed": 0.2,
          "opacity_min": 0,
          "sync": false
        }
      },
      "size": {
        "value": 2,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 2,
          "size_min": 0,
          "sync": false
        }
      },
      "line_linked": {
        "enable": false,
        "distance": 150,
        "color": "#ffffff",
        "opacity": 0.4,
        "width": 1
      },
      "move": {
        "enable": true,
        "speed": 0.2,
        "direction": "none",
        "random": true,
        "straight": false,
        "out_mode": "out",
        "bounce": false,
        "attract": {
          "enable": false,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "canvas",
      "events": {
        "onhover": {
          "enable": true,
          "mode": "bubble"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 400,
          "line_linked": {
            "opacity": 1
          }
        },
        "bubble": {
          "distance": 83.91608391608392,
          "size": 1,
          "duration": 3,
          "opacity": 1,
          "speed": 3
        },
        "repulse": {
          "distance": 200,
          "duration": 0.4
        },
        "push": {
          "particles_nb": 4
        },
        "remove": {
          "particles_nb": 2
        }
      }
    },
    "retina_detect": true
  });